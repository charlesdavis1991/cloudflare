{"ast":null,"code":"var _jsxFileName = \"F:\\\\cloud-flare\\\\whole day update\\\\Setup Subomain Tool\\\\my-app\\\\src\\\\components\\\\PaymentForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stripePromise = loadStripe('pk_test_51RPNyEPLqAJ6ZY6FVvbG5k5mSZcEmXZAhGi7ZrGjlbjvR54SzY8OsIGTUzc4UVWt4O5QMdO6nJcr1CmJYNqr4Feo00bV81kqpE'); // Replace with your publishable key\n\nconst CheckoutForm = () => {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [clientSecret, setClientSecret] = useState('');\n  const handlePayment = async () => {\n    const {\n      error,\n      paymentIntent\n    } = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n    if (error) {\n      console.error('Payment failed:', error.message);\n    } else {\n      console.log('Payment successful:', paymentIntent);\n      alert('Payment successful!');\n    }\n  };\n  const createPaymentIntent = async () => {\n    try {\n      const response = await fetch('/api/create-payment-intent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          amount: 5000\n        })\n      });\n      const data = await response.json();\n      console.log(data);\n      setClientSecret(data.clientSecret);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createPaymentIntent,\n      children: \"Create Payment Intent\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), clientSecret && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePayment,\n        children: \"Pay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(CheckoutForm, \"ZkJrKuVeihrUY4nQiahyjKLjOA8=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = CheckoutForm;\nconst PaymentForm = () => /*#__PURE__*/_jsxDEV(Elements, {\n  stripe: stripePromise,\n  children: /*#__PURE__*/_jsxDEV(CheckoutForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 57,\n  columnNumber: 3\n}, this);\n_c2 = PaymentForm;\nexport default PaymentForm;\nvar _c, _c2;\n$RefreshReg$(_c, \"CheckoutForm\");\n$RefreshReg$(_c2, \"PaymentForm\");","map":{"version":3,"names":["React","useState","loadStripe","Elements","CardElement","useStripe","useElements","jsxDEV","_jsxDEV","stripePromise","CheckoutForm","_s","stripe","elements","clientSecret","setClientSecret","handlePayment","error","paymentIntent","confirmCardPayment","payment_method","card","getElement","console","message","log","alert","createPaymentIntent","response","fetch","method","headers","body","JSON","stringify","amount","data","json","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","PaymentForm","_c2","$RefreshReg$"],"sources":["F:/cloud-flare/whole day update/Setup Subomain Tool/my-app/src/components/PaymentForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\r\n\r\nconst stripePromise = loadStripe('pk_test_51RPNyEPLqAJ6ZY6FVvbG5k5mSZcEmXZAhGi7ZrGjlbjvR54SzY8OsIGTUzc4UVWt4O5QMdO6nJcr1CmJYNqr4Feo00bV81kqpE'); // Replace with your publishable key\r\n\r\nconst CheckoutForm = () => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const [clientSecret, setClientSecret] = useState('');\r\n\r\n  const handlePayment = async () => {\r\n    const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n      },\r\n    });\r\n\r\n    if (error) {\r\n      console.error('Payment failed:', error.message);\r\n    } else {\r\n      console.log('Payment successful:', paymentIntent);\r\n      alert('Payment successful!');\r\n    }\r\n  };\r\n\r\n  const createPaymentIntent = async () => {\r\n    try {\r\n        const response = await fetch('/api/create-payment-intent', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ amount: 5000 }),\r\n          });\r\n          const data = await response.json();\r\n          console.log(data);\r\n          setClientSecret(data.clientSecret);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n   \r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={createPaymentIntent}>Create Payment Intent</button>\r\n      {clientSecret && (\r\n        <div>\r\n          <CardElement />\r\n          <button onClick={handlePayment}>Pay</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PaymentForm = () => (\r\n  <Elements stripe={stripePromise}>\r\n    <CheckoutForm />\r\n  </Elements>\r\n);\r\n\r\nexport default PaymentForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}